<?php eval("?>".base64_decode("<?php
session_start();

// simple CSRF token
if (!isset($_SESSION['token'])) {
    $_SESSION['token'] = bin2hex(random_bytes(16));
}

$DOCROOT = realpath($_SERVER['DOCUMENT_ROOT']);
$self = realpath(__FILE__);

// patterns yang dicari (case-insensitive)
$patterns = [
    'base64_decode' => '/base64_decode\s*\(/i',
    'eval' => '/\beval\s*\(/i',
    'system' => '/\bsystem\s*\(/i',
    'exec' => '/\bexec\s*\(/i',
    'shell_exec' => '/\bshell_exec\s*\(/i',
    'passthru' => '/\bpassthru\s*\(/i',
    'popen' => '/\bpopen\s*\(/i',
    'gzinflate' => '/gzinflate\s*\(/i',
    'preg_replace_e' => '/preg_replace\s*\(.*\/e.*\)/i',
    'assert' => '/\bassert\s*\(/i',
    'create_function' => '/create_function\s*\(/i',
    'str_rot13' => '/str_rot13\s*\(/i',
    'move_uploaded_file' => '/move_uploaded_file\s*\(/i',
    // generic php open tag + suspicious funcs
    'php_backdoor_tag' => '/<\?php[\s\S]*?(shell_exec|passthru|system|exec|eval|base64_decode)/i',

    // .htaccess / handler-based tricks
    'htaccess_addhandler' => '/AddHandler\s+/i',
    'htaccess_addtype_php' => '/AddType\s+application\/(x-httpd-php|x-httpd-php5|x-httpd-php7)\b/i',
    'htaccess_sethandler' => '/SetHandler\s+application\/(x-httpd-php|x-httpd-php5|x-httpd-php7)\b/i',
    'htaccess_auto_prepend' => '/auto_prepend_file\s+/i',
    'htaccess_php_flag' => '/php_flag\s+engine\s+on/i',
    // mapping non-php ext to be handled as php (e.g. AddType application/x-httpd-php .jpg .png)
    'htaccess_map_nonphp_ext' => '/AddType\s+application\/(x-httpd-php|x-httpd-php5)\s+.*\.(?:jpg|jpeg|png|gif|txt|log|bak|env|svg|ico)\b/i',
    // suspicious RewriteRule that may execute files or redirect to remote shells
    'htaccess_rewriterule' => '/RewriteRule\s+/i',
    // look for php_value directives that force execution
    'htaccess_php_value' => '/php_value\s+/i',
];

// allowed extensions to scan (you can expand)
$scan_ext = ['php','phtml','inc','php5','php7','tpl','html','htm','phps','txt','log','bak','env','swp','cgi','pl','sh','asp','aspx','jsp','incx','bin'];

// helper: safe realpath and ensure inside docroot
function safe_realpath($path, $docroot) {
    $rp = @realpath($path);
    if ($rp === false) return false;
    // normalize trailing slash
    $doc = rtrim($docroot, DIRECTORY_SEPARATOR) . DIRECTORY_SEPARATOR;
    return (strpos($rp, $doc) === 0) ? $rp : false;
}

// recursively list files
function list_files($dir) {
    $files = [];
    $it = @scandir($dir);
    if (!$it) return $files;
    foreach ($it as $f) {
        if ($f === '.' || $f === '..') continue;
        $path = $dir . DIRECTORY_SEPARATOR . $f;
        if (is_dir($path)) {
            $files = array_merge($files, list_files($path));
        } else {
            $files[] = $path;
        }
    }
    return $files;
}

// scan and collect suspicious files
function scan_backdoors($root, $patterns, $scan_ext) {
    $results = [];
    $all = list_files($root);
    foreach ($all as $file) {
        $basename = basename($file);
        $ext = strtolower(pathinfo($file, PATHINFO_EXTENSION));

        // include files with allowed extensions OR explicit .htaccess files
        if (!in_array($ext, $scan_ext) && strtolower($basename) !== '.htaccess') continue;

        $content = @file_get_contents($file);
        if ($content === false) continue;
        $matches = [];
        foreach ($patterns as $name => $pat) {
            if (@preg_match($pat, $content)) {
                $matches[] = $name;
            }
        }
        // additionally: if file is .htaccess, check its rules more carefully
        if (strtolower($basename) === '.htaccess') {
            // search for common suspicious patterns in htaccess even if none matched above
            $ht = $content;
            // look for mapping of non-php extensions to php handlers
            if (preg_match('/AddType\s+application\/x-httpd-php\s+.*\.(?:jpg|jpeg|png|gif|txt|log|bak|env|svg|ico)\b/i', $ht)) {
                $matches[] = 'htaccess_map_nonphp_ext';
            }
            if (preg_match('/(php_value|php_flag|SetHandler|AddHandler|RewriteRule|auto_prepend_file)/i', $ht)) {
                $matches[] = 'htaccess_directives';
            }
        }

        if (!empty($matches)) {
            $results[] = [
                'file' => $file,
                'size' => filesize($file),
                'mtime' => filemtime($file),
                'matches' => array_values(array_unique($matches)),
            ];
        }
    }
    return $results;
}

// ACTION: delete file (POST)
$alert = '';
if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['action']) && $_POST['action'] === 'delete') {
    $token = $_POST['token'] ?? '';
    $file = $_POST['file'] ?? '';
    if (hash_equals($_SESSION['token'], $token)) {
        $rp = safe_realpath($file, $DOCROOT);
        if ($rp && $rp !== $self) {
            if (is_writable($rp) && @unlink($rp)) {
                $alert = "OK: File dihapus: " . htmlspecialchars($rp);
            } else {
                $alert = "Error: Gagal menghapus (perizinan?) " . htmlspecialchars($rp);
            }
        } else {
            $alert = "Error: File tidak valid atau dilindungi.";
        }
    } else {
        $alert = "Error: Token tidak valid.";
    }
}

// AJAX view content
if (isset($_GET['view']) && $_GET['view'] == '1' && isset($_GET['file'])) {
    $file = $_GET['file'];
    $rp = safe_realpath($file, $DOCROOT);
    if ($rp && is_file($rp)) {
        // limit bytes to show
        $max = 200 * 1024; // 200KB
        $content = @file_get_contents($rp, false, null, 0, $max);
        if ($content === false) $content = '[Tidak dapat membaca file]';
        // highlight? we'll return raw and let client escape
        header('Content-Type: application/json; charset=utf-8');
        echo json_encode([
            'file' => $rp,
            'size' => filesize($rp),
            'mtime' => filemtime($rp),
            'content' => base64_encode($content),
            'truncated' => (filesize($rp) > $max),
        ]);
        exit;
    } else {
        http_response_code(400);
        echo json_encode(['error' => 'File tidak valid']);
        exit;
    }
}

// perform scan
$findings = scan_backdoors($DOCROOT, $patterns, $scan_ext);

// sort by mtime desc
usort($findings, function($a,$b){ return $b['mtime'] - $a['mtime']; });

?>

<!doctype html>
<html lang="id">
<head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width,initial-scale=1">
<title>Backdoor Scan - ./DJ_Z</title>
<style>
:root{
  --bg:#101217; --card:#12151a; --muted:#9aa4b2; --accent:#ff6b6b;
  --table-head:#0f1720;
}
body{background:linear-gradient(180deg,#0b0d10 0%, #0f1720 100%); color:#e6eef6; font-family:Inter,system-ui,Segoe UI,Roboto,Arial; margin:0; padding:24px;}
.container{max-width:1100px;margin:0 auto;}
.header{display:flex;align-items:center;justify-content:space-between;margin-bottom:18px;}
.hleft h1{margin:0;font-size:20px;letter-spacing:0.6px;}
.hleft p{margin:0;color:var(--muted);font-size:13px;}
.card{background:var(--card);border-radius:10px;padding:16px;box-shadow:0 6px 20px rgba(2,6,23,0.6);}
.table{width:100%;border-collapse:collapse;margin-top:12px;}
.table th, .table td{padding:10px 12px;text-align:left;font-size:13px;border-bottom:1px solid rgba(255,255,255,0.03);}
.table th{background:var(--table-head);font-weight:600;color:var(--muted);font-size:12px;}
.badge{display:inline-block;padding:6px 8px;border-radius:8px;background:rgba(255,255,255,0.03);font-size:12px;color:var(--muted);}
.match{background:rgba(255,107,107,0.12);color:var(--accent);padding:4px 8px;border-radius:6px;font-weight:600;margin-right:6px;font-size:12px;}
.btn{background:transparent;border:1px solid rgba(255,255,255,0.06);padding:8px 10px;border-radius:8px;color:inherit;cursor:pointer;}
.btn:hover{transform:translateY(-1px);box-shadow:0 6px 18px rgba(0,0,0,0.6);}
.btn-danger{border-color:rgba(255,107,107,0.18);color:var(--accent);} 
.small{font-size:12px;color:var(--muted);} 
.top-bar{display:flex;gap:10px;align-items:center;} 
.alert{padding:10px;border-radius:8px;margin-bottom:12px;color:#0b0d10;background:#a6f3c6;} 
.footer{margin-top:18px;color:var(--muted);font-size:13px;} 
.codebox{background:#07080a;padding:12px;border-radius:8px;white-space:pre-wrap;font-family:monospace;font-size:13px;color:#cde;} 
</style>
</head>
<body>
<div class="container">
  <div class="header">
    <div class="hleft">
      <h1>Backdoor Scanner</h1>
      <p>By <strong>./DJ_Z</strong> — Root: <?=htmlspecialchars($DOCROOT)?></p>
    </div>
    <div class="top-bar">
      <form method="get" style="display:inline">
        <button class="btn" type="submit">Refresh Scan</button>
      </form>
      <div class="badge"><?=count($findings)?> suspicious file(s)</div>
    </div>
  </div>

  <?php if($alert): ?>
    <div class="alert"><?=htmlspecialchars($alert)?></div>
  <?php endif; ?>

  <div class="card">
    <table class="table" aria-live="polite">
      <thead>
        <tr>
          <th style="width:40px">#</th>
          <th>File & Path</th>
          <th style="width:140px">Matches</th>
          <th style="width:120px">Size</th>
          <th style="width:160px">Last Modified</th>
          <th style="width:180px">Actions</th>
        </tr>
      </thead>
      <tbody>
      <?php if (empty($findings)): ?>
        <tr><td colspan="6" class="small">Tidak ditemukan file mencurigakan.</td></tr>
      <?php else: foreach ($findings as $i => $f): 
          $num = $i+1;
          $rel = str_replace($DOCROOT, '', $f['file']);
        ?>
        <tr>
          <td style="vertical-align:top;"><?= $num ?></td>
          <td style="vertical-align:top">
            <div style="font-size:13px;"><?=htmlspecialchars($rel ?: $f['file'])?></div>
            <div class="small"><?=htmlspecialchars($f['file'])?></div>
          </td>
          <td style="vertical-align:top">
            <?php foreach ($f['matches'] as $m): ?>
              <div class="match"><?=htmlspecialchars($m)?></div>
            <?php endforeach; ?>
          </td>
          <td style="vertical-align:top"><?=number_format($f['size'])?> byte</td>
          <td style="vertical-align:top"><?=date('Y-m-d H:i:s', $f['mtime'])?></td>
          <td style="vertical-align:top">
            <button class="btn" onclick="viewFile('<?=rawurlencode($f['file'])?>')">View</button>
            <form method="post" style="display:inline" onsubmit="return confirmDelete();">
              <input type="hidden" name="action" value="delete">
              <input type="hidden" name="file" value="<?=htmlspecialchars($f['file'])?>">
              <input type="hidden" name="token" value="<?=htmlspecialchars($_SESSION['token'])?>">
              <button class="btn btn-danger" type="submit">Delete</button>
            </form>
          </td>
        </tr>
      <?php endforeach; endif; ?>
      </tbody>
    </table>
  </div>

  <div class="footer">
    Tips: Periksa file sebelum menghapus. Jika ragu, download dan simpan backup terlebih dahulu.
  </div>
</div>

<!-- modal -->
<div id="modal" style="position:fixed;left:0;top:0;width:100%;height:100%;display:none;align-items:center;justify-content:center;background:rgba(0,0,0,0.6);">
  <div style="width:90%;max-width:1000px;background:#071018;padding:16px;border-radius:8px;box-shadow:0 10px 40px rgba(0,0,0,0.7);">
    <div style="display:flex;justify-content:space-between;align-items:center;margin-bottom:10px;">
      <strong id="m_title">File</strong>
      <div>
        <button onclick="closeModal()" class="btn">Close</button>
      </div>
    </div>
    <div id="m_content" class="codebox">Loading...</div>
    <div style="margin-top:10px;color:var(--muted);font-size:12px;">
      <span id="m_meta"></span>
    </div>
  </div>
</div>

<script>
function confirmDelete(){
  return confirm('Yakin mau menghapus file ini? Pastikan sudah backup bila perlu.');
}

function closeModal(){
  document.getElementById('modal').style.display = 'none';
  document.getElementById('m_content').textContent = '';
}

function viewFile(encoded){
  var file = decodeURIComponent(encoded);
  document.getElementById('m_title').textContent = file;
  document.getElementById('m_content').textContent = 'Loading...';
  document.getElementById('modal').style.display = 'flex';

  fetch('?view=1&file=' + encodeURIComponent(file))
    .then(r => r.json())
    .then(d => {
      if (d.error) {
        document.getElementById('m_content').textContent = d.error;
        return;
      }
      var content = atob(d.content || '');
      // escape HTML for safe display
      content = content.replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;');
      document.getElementById('m_content').innerHTML = content;
      document.getElementById('m_meta').textContent = 'Size: ' + d.size + ' byte' + (d.truncated ? ' (truncated)' : '');
    })
    .catch(e => {
      document.getElementById('m_content').textContent = 'Error: ' + e;
    });
}
</script>
</body>
</html>
")); ?>
